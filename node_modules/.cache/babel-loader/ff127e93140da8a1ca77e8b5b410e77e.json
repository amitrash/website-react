{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amit\\\\Projects\\\\website-bootstrap-to-react\\\\src\\\\Components\\\\Pages\\\\Contact.js\";\nimport React, { Component } from 'react';\nimport Field from '../Common/Field';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nconst fields = {\n  sections: [[{\n    name: 'name',\n    elementName: 'input',\n    type: 'text',\n    placeholder: \"Your name*\"\n  }, {\n    name: 'email',\n    elementName: 'input',\n    type: 'email',\n    placeholder: \"Your email*\"\n  }, {\n    name: 'phone',\n    elementName: 'input',\n    type: 'text',\n    placeholder: \"Your phone*\"\n  }], [{\n    name: 'message',\n    elementName: 'textarea',\n    type: 'text',\n    placeholder: \"Type your message\"\n  }]]\n};\n\nclass Contact extends Component {\n  /*constructor(props){\r\n      super(props);\r\n        this.state = {\r\n          name: \"\",\r\n          email: \"\",\r\n          phone: \"\",\r\n          message: \"\"\r\n      }\r\n  }\r\n  \r\n  submitForm = (event) =>{\r\n      alert(\"Form submitted!\")\r\n  }*/\n  ////in form ----> id=\"contactForm\"\n  render() {\n    return React.createElement(\"section\", {\n      className: \"page-section\",\n      id: \"contact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-lg-12 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"section-heading text-uppercase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Contact Us\"), React.createElement(\"h3\", {\n      className: \"section-subheading text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Lorem ipsum dolor sit amet consectetur.\"))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-lg-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit,\n      name: \"sentMessage\",\n      noValidate: \"novalidate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, fields.sections.map((section, sectionIndex) => {\n      console.log(\"Section\", sectionIndex, \"with\", section);\n      return React.createElement(\"div\", {\n        className: \"col-md-6\",\n        key: sectionIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, section.map((field, i) => {\n        return React.createElement(Field, Object.assign({}, field, {\n          key: i,\n          value: this.props.values[field.name],\n          name: field.name,\n          onChange: this.props.handleChange,\n          onBlur: this.props.handleBlur,\n          touched: this.props.touched[field.name],\n          errors: this.props.errors[field.name],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }));\n      }));\n    }), React.createElement(\"div\", {\n      className: \"clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-lg-12 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"sendMessageButton\",\n      className: \"btn btn-primary btn-xl text-uppercase\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Send Message\"))))))));\n  }\n\n}\n\nconst phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\nconst nameRegExp = /^[aA-zZ\\s]+$/;\nexport default withFormik({\n  mapPropsToValues: () => ({\n    name: '',\n    email: '',\n    phone: '',\n    message: ''\n  }),\n  validationSchema: Yup.object().shape({\n    name: Yup.string().matches(nameRegExp, \"Only alphabets are allowed for this field \").min(3, 'Come on bro, your name is longer then that.').required('You must give us your name.'),\n    email: Yup.string().email('You need to give a valid email.').required('We need your email.'),\n    phone: Yup.string().matches(phoneRegExp, 'Please provide valid phone number.').required('Phone is required.'),\n    message: Yup.string().min(200, 'You need to provide us more detailed information.(Minimum 200 letters)').required('Message is required.')\n  }),\n\n  /* validate: values => {\r\n       const errors ={};\r\n       \r\n       Object.keys(values).map(v => {\r\n           if(!values[v]){\r\n               errors[v] = \"Requierd\";\r\n           }\r\n       })\r\n         return errors;\r\n   },*/\n  handleSubmit: (values, {\n    setSubmitting\n  }) => {\n    alert(\"You've submitted the form\", JSON.stringify(values));\n  }\n})(Contact);","map":{"version":3,"sources":["C:\\Users\\Amit\\Projects\\website-bootstrap-to-react\\src\\Components\\Pages\\Contact.js"],"names":["React","Component","Field","withFormik","Yup","fields","sections","name","elementName","type","placeholder","Contact","render","props","handleSubmit","map","section","sectionIndex","console","log","field","i","values","handleChange","handleBlur","touched","errors","phoneRegExp","nameRegExp","mapPropsToValues","email","phone","message","validationSchema","object","shape","string","matches","min","required","setSubmitting","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Field from '../Common/Field';\r\nimport {withFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst fields =  {\r\n    sections: [\r\n        [\r\n            {name: 'name', elementName: 'input', type: 'text', placeholder:\"Your name*\"},\r\n            {name: 'email', elementName: 'input', type: 'email', placeholder:\"Your email*\"},\r\n            {name: 'phone', elementName: 'input', type: 'text', placeholder:\"Your phone*\"},\r\n        ],\r\n        [\r\n            {name: 'message', elementName: 'textarea', type: 'text', placeholder:\"Type your message\"},\r\n        ]\r\n    ]\r\n}\r\n\r\n\r\nclass Contact extends Component{\r\n    /*constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            message: \"\"\r\n        }\r\n    }\r\n    \r\n    submitForm = (event) =>{\r\n        alert(\"Form submitted!\")\r\n    }*/\r\n////in form ----> id=\"contactForm\"\r\n    render(){\r\n        return(\r\n            <section className=\"page-section\" id=\"contact\">\r\n                <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-12 text-center\">\r\n                    <h2 className=\"section-heading text-uppercase\">Contact Us</h2>\r\n                    <h3 className=\"section-subheading text-muted\">Lorem ipsum dolor sit amet consectetur.</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-12\">\r\n                    <form onSubmit={this.props.handleSubmit} name=\"sentMessage\" noValidate=\"novalidate\">\r\n                        <div className=\"row\">\r\n                            {fields.sections.map((section, sectionIndex)=>{\r\n                                console.log(\"Section\", sectionIndex, \"with\", section)\r\n                                return(\r\n                                    <div className=\"col-md-6\" key={sectionIndex}>\r\n                                        {section.map((field, i)=>{\r\n                                            return <Field\r\n                                                        {...field}\r\n                                                        key={i}\r\n                                                        value={this.props.values[field.name]}\r\n                                                        name={field.name}\r\n                                                        onChange={this.props.handleChange}\r\n                                                        onBlur= {this.props.handleBlur}\r\n                                                        touched = {(this.props.touched[field.name])}\r\n                                                        errors = {(this.props.errors[field.name])}\r\n                                                    />\r\n                                        })}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        <div className=\"clearfix\"></div>\r\n                        <div className=\"col-lg-12 text-center\">\r\n                            <div id=\"success\"></div>\r\n                            <button id=\"sendMessageButton\" className=\"btn btn-primary btn-xl text-uppercase\" type=\"submit\">Send Message</button>\r\n                        </div>\r\n                        </div>\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst phoneRegExp =/^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\r\nconst nameRegExp =/^[aA-zZ\\s]+$/;\r\nexport default withFormik({\r\n    mapPropsToValues: () => ({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        message: '',\r\n    }),\r\n    validationSchema: Yup.object().shape({\r\n        name:  Yup.string().matches(nameRegExp, \"Only alphabets are allowed for this field \")\r\n        .min(3, 'Come on bro, your name is longer then that.').required('You must give us your name.'),\r\n        email: Yup.string().email('You need to give a valid email.').required('We need your email.'),\r\n        phone: Yup.string().matches(phoneRegExp, 'Please provide valid phone number.').required('Phone is required.'),\r\n        message: Yup.string().min(200, 'You need to provide us more detailed information.(Minimum 200 letters)').required('Message is required.'),\r\n    }),\r\n   /* validate: values => {\r\n        const errors ={};\r\n        \r\n        Object.keys(values).map(v => {\r\n            if(!values[v]){\r\n                errors[v] = \"Requierd\";\r\n            }\r\n        })\r\n\r\n        return errors;\r\n    },*/\r\n    handleSubmit: (values, {setSubmitting}) => {\r\n        alert(\"You've submitted the form\", JSON.stringify(values));\r\n    }\r\n})(Contact);"]},"metadata":{},"sourceType":"module"}